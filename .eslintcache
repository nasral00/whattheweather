[{"/Users/notrandom/javascript/react/weather-app/src/App.tsx":"1","/Users/notrandom/javascript/react/weather-app/src/components/Header.tsx":"2","/Users/notrandom/javascript/react/weather-app/src/reportWebVitals.ts":"3","/Users/notrandom/javascript/react/weather-app/src/components/Footer.tsx":"4","/Users/notrandom/javascript/react/weather-app/src/components/Weather.tsx":"5","/Users/notrandom/javascript/react/weather-app/src/components/WeatherContext.tsx":"6","/Users/notrandom/javascript/react/weather-app/src/index.tsx":"7"},{"size":439,"mtime":1609555486149,"results":"8","hashOfConfig":"9"},{"size":423,"mtime":1609727730503,"results":"10","hashOfConfig":"9"},{"size":425,"mtime":1609299658874,"results":"11","hashOfConfig":"9"},{"size":188,"mtime":1609305730908,"results":"12","hashOfConfig":"9"},{"size":3177,"mtime":1609729341683,"results":"13","hashOfConfig":"9"},{"size":3069,"mtime":1609728157381,"results":"14","hashOfConfig":"9"},{"size":500,"mtime":1609299658873,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8uinwr",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/notrandom/javascript/react/weather-app/src/App.tsx",[],"/Users/notrandom/javascript/react/weather-app/src/components/Header.tsx",["31"],"/Users/notrandom/javascript/react/weather-app/src/reportWebVitals.ts",[],"/Users/notrandom/javascript/react/weather-app/src/components/Footer.tsx",[],"/Users/notrandom/javascript/react/weather-app/src/components/Weather.tsx",[],"/Users/notrandom/javascript/react/weather-app/src/components/WeatherContext.tsx",["32"],"import React, { useState, createContext, useEffect } from \"react\";\n\nexport const WeatherContext = createContext({\n  weatherInfo: { city: \"\", temp: \"\", forecast: \"\" },\n  setWeatherInfo: {},\n  fetchWeather: (city: string, country: string, e: any) => {},\n});\n\n// const WeatherUpdateContext = createContext(\n//   (city: string, country: string) => {}\n// );\n\n// export function useWeatherContext() {\n//   return useContext(WeatherContext);\n// }\n// export function useWeatherUpdateContext() {\n//   return useContext(WeatherUpdateContext);\n// }\n\nexport function WeatherProvider(props: any) {\n  const API_KEY = \"7a420dd1ec3fe96ed02a07ec09aad34e\";\n  const URL = `http://api.openweathermap.org/data/2.5/weather?q=`;\n  const GEOLOCATION_URL = `http://api.openweathermap.org/data/2.5/weather?`;\n  const [weatherInfo, setWeatherInfo] = useState({\n    city: \"\",\n    temp: \"\",\n    forecast: \"\",\n  });\n  // const [geoLocationWeather, setGeoLocationWeather] = useState({\n  //   geoLocationCity: \"\",\n  //   geoLocationTemp: \"\",\n  //   geoLocationForecast: \"\",\n  // });\n  // navigator.geolocation.getCurrentPosition((p) => {\n  //   console.log(p);\n  // });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      let geoLocationPosition = navigator.geolocation.getCurrentPosition.bind(\n        navigator.geolocation\n      );\n      let geoLocationPositionAsync = () => new Promise(geoLocationPosition);\n      let getGeoLocationData = async () => {\n        const position = await geoLocationPositionAsync();\n        console.log(\"p\", position);\n        return [position.coords.latitude, position.coords.longitude];\n      };\n      getGeoLocationData()\n        .then((p) => {\n          return p;\n        })\n        .then((geoPositions) => {\n          fetch(\n            `${GEOLOCATION_URL}lat=${geoPositions[0]}&lon=${geoPositions[1]}&appid=${API_KEY}`\n          )\n            .then((res) => res.json())\n            .then((data) => {\n              setWeatherInfo({\n                city: data.name,\n                temp: data.main.temp,\n                forecast: data.weather[0].description,\n              });\n            });\n        });\n    }\n  }, []);\n\n  const fetchWeather = (city: string, country: string, event: any) => {\n    event.preventDefault();\n    fetch(`${URL}${city},${country}&appid=${API_KEY}`)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        return data;\n      })\n      .then((weather) => {\n        let weatherName = weather.name.toString();\n        let weatherTemp = weather.main.temp.toString();\n        let weatherForecast = weather.weather[0].description.toString();\n        console.log(weatherName);\n        console.log(weatherForecast);\n        console.log(weatherTemp);\n        setWeatherInfo({\n          city: weatherName,\n          temp: weatherTemp,\n          forecast: weatherForecast,\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{ weatherInfo, setWeatherInfo, fetchWeather }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n}\n","/Users/notrandom/javascript/react/weather-app/src/index.tsx",[],{"ruleId":"33","severity":1,"message":"34","line":6,"column":9,"nodeType":"35","messageId":"36","endLine":6,"endColumn":17},{"ruleId":"37","severity":1,"message":"38","line":66,"column":6,"nodeType":"39","endLine":66,"endColumn":8,"suggestions":"40"},"@typescript-eslint/no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GEOLOCATION_URL'. Either include it or remove the dependency array.","ArrayExpression",["41"],{"desc":"42","fix":"43"},"Update the dependencies array to be: [GEOLOCATION_URL]",{"range":"44","text":"45"},[2127,2129],"[GEOLOCATION_URL]"]